.bashrcに

export PYENV_ROOT="$HOME/.pyenv"
if [ -x "$PYENV_ROOT/bin/pyenv" ]; then
  export PATH="$PYENV_ROOT/bin:$PATH"
  . <(pyenv init -)
  [ -d "$PYENV_ROOT/plugins/pyenv-virtualenv" ] && . <(pyenv virtualenv-init -)
else
  install_pyenv() {
    git clone https://github.com/pyenv/pyenv.git "$HOME/.pyenv"
    git clone https://github.com/pyenv/pyenv-virtualenv.git "$HOME/.pyenv/plugins/pyenv-virtualenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    . <(pyenv init -)
    [ -d "$PYENV_ROOT/plugins/pyenv-virtualenv" ] && . <(pyenv virtualenv-init -)
  }
fi
シェルをリロードしてからinstall_pyenv

$ pyenv install miniconda3-latest

$ pyenv install --list
Available versions:
  2.1.3
  2.2.3
  2.3.7
  2.4
  2.4.1
  2.4.2
  2.4.3
  2.4.4
  2.4.5
  2.4.6
  2.5

$ pyenv global system miniconda3-latest

その1: 環境を作る
$ conda create --name brand-new-python python=3.7
$ pyenv shell miniconda3-latest/envs/brand-new-python
$ python -V
$ conda install opencv

$ conda install easydict
$ pip install easydict

$ cd project
$ python -V
Python 2.7.15
$ pyenv local miniconda3-latest/envs/brand-new-python
$ python -V
Python 3.7.0
$ cd ..
$ python -V
Python 2.7.15
これを元に戻したい場合はpyenv local --unsetです。


TL; DR
pyenv1とpyenv-virtualenv2をインストール
pyenv install miniconda3-latestでminicondaをインストール
pyenv global system miniconda3-latestでminicondaを有効化
conda create --name NAME python=X.YでPython環境を作成
pyenv shell miniconda3-latest/envs/NAMEで環境をシェルでだけ切り替え
pyenv local miniconda3-latest/envs/NAMEでそのディレクトリ内では自動で環境を有効化
conda install package1 package2 ...でパッケージをインストール
condaに無いパッケージは通常通りpip install ...でインストール
この時インストール先は$PYENV_ROOT以下のディレクトリになるのでsudoは不要
pip install --user ...とすると~/.localに入って環境を分けた意味が無くなるので注意
As you wish.
